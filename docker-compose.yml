version: '3.8'
services:
  api:
    build:
      dockerfile: Dockerfile.dev
    command: npm run start
    environment:
      MAX_DAILY_UPLOADS: 5000
      MAX_DAILY_DOWNLOADS: 500000
      RATE_LIMIT_PROVIDER: redis
      REDIS_URI: redis://redis:${REDIS_PORT}
      DB_PROVIDER: mongodb
      MONGODB_URI: mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:${MONGODB_PORT}/${MONGODB_DATABASE}
      NODE_ENV: development
      PORT: ${PORT}
    ports:
      - '${PORT}:${PORT}'
    volumes:
      - .:/usr/app
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
  redis:
    image: redis:7.0.5-alpine3.16
    ports:
      - '${REDIS_PORT}'
    volumes:
      - redis-data:/data
    healthcheck:
      test: redis-cli ping | grep PONG
      timeout: 1s
      interval: 5s
      start_period: 10s
  mongodb:
    image: mongo:6.0.2-focal
    command: mongod --auth
    ports:
      - '${MONGODB_PORT}'
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE}
    volumes:
      - mongo-data:/data/db
      - ./init-mongodb.js:/docker-entrypoint-initdb.d/init-mongodb.js
    healthcheck:
      test: |
        bash -c "if mongosh -u ${MONGODB_USERNAME} -p ${MONGODB_PASSWORD} --eval 'db.runCommand({ ping: 1}).ok ? 0 : 2;' --quiet; then exit 0; fi; exit 1;"
      timeout: 2s
      interval: 5s
      start_period: 15s
  mongo-express:
    image: mongo-express:1.0.0-alpha.4
    ports:
      - '8081:8081'
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:${MONGODB_PORT}
    depends_on:
      mongodb:
        condition: service_healthy
volumes:
  redis-data:
  mongo-data:
